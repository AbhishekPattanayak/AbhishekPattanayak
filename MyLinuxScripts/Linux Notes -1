•
Basic Requirements for Writing a Shell Script: Like any programming language, to write a shell script, you first need a file where you will write the script.
•
Creating Files:
◦
The touch command is a basic command used to create files on a Linux machine. You use it by typing touch [filename]. If the file does not exist, touch creates it with default permissions.
◦
The vim or vi command can also create and open a file simultaneously if the file does not exist. vi is typically available by default on any Linux machine, while vim might require installation.
◦
While vim/vi can create files, the touch command is important for automations, especially when you need to create many files (hundreds or thousands) because vim/vi opens the file, which is not suitable for such bulk operations as opening too many files can cause issues.
•
Listing Files/Folders:
◦
The ls command is used to list files or folders (directories) in the current location.
◦
ls -LTR provides a detailed listing including the timestamp of when files were created or modified, who created the file, permissions, and group information. -t specifically lists files by modification time, newest first.
•
Getting Help/Manuals: The man command (short for manual) provides documentation for Linux commands. You use it by typing man [command_name] (e.g., man ls, man touch, man chmod). It provides details about the command's purpose, options, and usage.
•
Accessing the Terminal: To work on a Linux machine via command line, you use a terminal. On Windows, tools like Putty can be used to SSH into a virtual machine and use the terminal. On Mac, tools like Terminal or iTerm are used.
•
Opening and Editing Files (vi/vim):
◦
To open a file, use the command vim [filename] or vi [filename].
◦
When you open a file in vi/vim, you are in command mode. To write inside the file, you need to enter insert mode by pressing the Esc key followed by the i key. You can see "INSERT" at the bottom left of the screen when in insert mode.
◦
To save and quit, return to command mode by pressing Esc, then type :wq! (write and quit) and press Enter.
◦
To quit without saving, return to command mode by pressing Esc, then type :q! (quit) and press Enter. If you just use :q after making changes, it will likely prevent you from quitting without saving.
•
Viewing File Contents (cat): The cat command is used to print the contents of a file to the terminal without opening it for editing. This is useful for quickly inspecting what's inside a file.
•
Executing a Shell Script: Once a shell script file is created and contains the script, you can execute it in two ways:
◦
Use the shell interpreter explicitly: sh [filename.sh].
◦
Use the dot slash notation: ./[filename.sh]. The ./ indicates that the executable file is in the current directory. This method can be used for any executable file in Linux.
•
File Permissions (chmod):
◦
Linux is highly secure and requires permissions to be granted to execute files. Even if you create a file, you might not have execute permissions by default.
◦
The chmod command (change mode) is used to grant permissions to a file.
◦
Permissions are managed for three categories: the User (owner of the file), the Group the owner belongs to, and Everyone (others who are logged into the machine).
◦
The three types of permissions are Read (r), Write (w), and Execute (x).
◦
Permissions can be represented numerically using a formula: 4 for Read, 2 for Write, 1 for Execute.
◦
To grant permissions, you use chmod followed by a three-digit number (representing permissions for User, Group, Everyone) and the file name.
▪
Example: chmod 777 [filename] grants Read (4) + Write (2) + Execute (1) = 7 permissions to the User, Group, and Everyone. With 777, literally everybody logging into the machine has read, write, and execute access.
▪
Example: chmod 444 [filename] grants only Read (4) permissions to the User, Group, and Everyone. Nobody can write or execute the file.
▪
Example: chmod 770 [filename] grants Read, Write, Execute (7) to the User and Group, but no permissions (0) to Everyone else.
▪
Example: chmod 771 [filename] grants Read, Write, Execute (7) to the User and Group, and only Execute (1) to Everyone else.
◦
If you try to execute a script without execute permissions, you will get a "permission denied" error.
•
Shebang (#!):
◦
The very first line in a shell script is typically the shebang. It starts with #! followed by the path to the interpreter (executable) that should be used to run the script.
◦
Examples of interpreters include /bin/bash, /bin/sh, /bin/ksh, /bin/dash.
◦
Specifying the interpreter is important because different shells (Bash, Ksh, Sh, Dash) may have slight syntax differences.
◦
Difference between /bin/sh and /bin/bash: Historically, /bin/sh often redirected to /bin/bash through a concept called linking. However, some modern operating systems (like Ubuntu) now link /bin/sh to /bin/dash by default instead of Bash. Therefore, it is crucial to explicitly use #!/bin/bash at the beginning of your script if you are writing in Bash syntax, to ensure it runs correctly on different systems. This is a common interview question.
•
Writing a Simple Script (Example): A simple script can be written to print output using the echo command. For example, a script to print "my name is Abhishek" would contain #!/bin/bash on the first line and echo "my name is Abhishek" on the second line.
•
History of Commands: The history command displays a list of all commands previously entered in the current terminal session. This is useful if you forget a command you recently used.
•
Current Working Directory (pwd): The pwd command (present working directory) is used to display the full path of your current location (folder) in the Linux file system.
•
Creating Directories (mkdir): The mkdir command (make directory) is used to create new folders. Usage: mkdir [folder_name].
•
Changing Directories (cd): The cd command (change directory) is used to navigate between folders.
◦
cd [folder_name] moves you into the specified folder.
◦
cd .. moves you up one directory level.
•
Deleting Files/Folders (rm): The rm command is used to remove (delete) files or folders. The command rm -rf [folder_name] is used to remove a directory recursively (-r) and forcefully (-f).
•
Sample Shell Script (Combined Commands): An example script is shown that combines mkdir and cd to create a folder, change into it, and then uses touch to create files inside. The script would look something like:
•
After writing this script and saving it, you would need to grant it execute permissions using chmod (e.g., chmod 777 sample_shell_script.sh) before executing it (./sample_shell_script.sh).
•
Role of Shell Scripting in DevOps: Shell scripting is a must-learn for DevOps engineers. It is used for:
◦
Infrastructure automation/maintenance.
◦
Configuration management.
◦
Code management (interacting with Git repositories, often hosted on Linux).
◦
Automating tasks like cron jobs.
◦
Executing other automation tools.
◦
Monitoring the health of nodes (virtual machines), especially in large environments (e.g., 10,000 VMS). A devops engineer like "John" could write a script to automatically check parameters like CPU usage, memory usage, and running processes across many machines, identify issues, and send notifications.
◦
While tools like Ansible exist, shell scripts are still needed for regular automation or specific monitoring needs. Shell scripting is considered a prerequisite before learning more complex automation languages like Python.
•
Commands for Monitoring:
◦
nproc: Used to list the number of CPUs on a machine.
◦
free: Used to check memory status (total, used, free).
◦
top: A powerful command to monitor running processes, showing CPU usage, memory usage, process IDs, and other details in real-time. It helps identify which processes are consuming the most resources. This is another basic interview question related to monitoring node health.
•
Advanced Concepts (Mentioned): The video mentions more advanced shell scripting topics like trapping signals (preventing script interruption, e.g., by Ctrl+C, using the trap command), writing custom monitoring scripts, and cron jobs, which could be covered in future videos.
